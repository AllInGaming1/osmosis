// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/cron/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterCron defines the Msg/RegisterCron request type.
type MsgRegisterCron struct {
	// security_address is the address authorised to register the cron job
	SecurityAddress string `protobuf:"bytes,1,opt,name=security_address,json=securityAddress,proto3" json:"security_address,omitempty"`
	// name is the name of the cron job
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description is the description of the cron job
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// contract_address is the address of the contract
	ContractAddress string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Msg is json encoded message to be passed to the contract
	JsonMsg string `protobuf:"bytes,5,opt,name=json_msg,json=jsonMsg,proto3" json:"json_msg,omitempty"`
}

func (m *MsgRegisterCron) Reset()         { *m = MsgRegisterCron{} }
func (m *MsgRegisterCron) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCron) ProtoMessage()    {}
func (*MsgRegisterCron) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{0}
}
func (m *MsgRegisterCron) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCron) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCron.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCron) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCron.Merge(m, src)
}
func (m *MsgRegisterCron) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCron) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCron.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCron proto.InternalMessageInfo

func (m *MsgRegisterCron) GetSecurityAddress() string {
	if m != nil {
		return m.SecurityAddress
	}
	return ""
}

func (m *MsgRegisterCron) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterCron) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgRegisterCron) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgRegisterCron) GetJsonMsg() string {
	if m != nil {
		return m.JsonMsg
	}
	return ""
}

// MsgRegisterCronResponse defines the Msg/RegisterCron response type.
type MsgRegisterCronResponse struct {
}

func (m *MsgRegisterCronResponse) Reset()         { *m = MsgRegisterCronResponse{} }
func (m *MsgRegisterCronResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCronResponse) ProtoMessage()    {}
func (*MsgRegisterCronResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{1}
}
func (m *MsgRegisterCronResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCronResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCronResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCronResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCronResponse.Merge(m, src)
}
func (m *MsgRegisterCronResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCronResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCronResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCronResponse proto.InternalMessageInfo

// MsgUpdateCronJob defines the Msg/UpdateCronJob request type.
type MsgUpdateCronJob struct {
	// security_address is the address authorised to update the cron job
	SecurityAddress string `protobuf:"bytes,1,opt,name=security_address,json=securityAddress,proto3" json:"security_address,omitempty"`
	// id is the unique identifier for the cron job
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// contract_address is the address of the contract
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Msg is json encoded message to be passed to the contract
	JsonMsg string `protobuf:"bytes,4,opt,name=json_msg,json=jsonMsg,proto3" json:"json_msg,omitempty"`
}

func (m *MsgUpdateCronJob) Reset()         { *m = MsgUpdateCronJob{} }
func (m *MsgUpdateCronJob) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCronJob) ProtoMessage()    {}
func (*MsgUpdateCronJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{2}
}
func (m *MsgUpdateCronJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCronJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCronJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCronJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCronJob.Merge(m, src)
}
func (m *MsgUpdateCronJob) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCronJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCronJob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCronJob proto.InternalMessageInfo

func (m *MsgUpdateCronJob) GetSecurityAddress() string {
	if m != nil {
		return m.SecurityAddress
	}
	return ""
}

func (m *MsgUpdateCronJob) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateCronJob) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgUpdateCronJob) GetJsonMsg() string {
	if m != nil {
		return m.JsonMsg
	}
	return ""
}

// MsgUpdateCronJobResponse defines the Msg/UpdateCron response type.
type MsgUpdateCronJobResponse struct {
}

func (m *MsgUpdateCronJobResponse) Reset()         { *m = MsgUpdateCronJobResponse{} }
func (m *MsgUpdateCronJobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCronJobResponse) ProtoMessage()    {}
func (*MsgUpdateCronJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{3}
}
func (m *MsgUpdateCronJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCronJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCronJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCronJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCronJobResponse.Merge(m, src)
}
func (m *MsgUpdateCronJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCronJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCronJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCronJobResponse proto.InternalMessageInfo

// MsgDeleteCronJob defines the Msg/DeleteCronJob request type.
type MsgDeleteCronJob struct {
	// security_address is the address authorised to delete the cron job
	SecurityAddress string `protobuf:"bytes,1,opt,name=security_address,json=securityAddress,proto3" json:"security_address,omitempty"`
	// id is the unique identifier for the cron job
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// contract_address is the address of the contract
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgDeleteCronJob) Reset()         { *m = MsgDeleteCronJob{} }
func (m *MsgDeleteCronJob) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCronJob) ProtoMessage()    {}
func (*MsgDeleteCronJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{4}
}
func (m *MsgDeleteCronJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCronJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCronJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCronJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCronJob.Merge(m, src)
}
func (m *MsgDeleteCronJob) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCronJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCronJob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCronJob proto.InternalMessageInfo

func (m *MsgDeleteCronJob) GetSecurityAddress() string {
	if m != nil {
		return m.SecurityAddress
	}
	return ""
}

func (m *MsgDeleteCronJob) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgDeleteCronJob) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgDeleteCronJobResponse defines the Msg/DeleteCronJob response type.
type MsgDeleteCronJobResponse struct {
}

func (m *MsgDeleteCronJobResponse) Reset()         { *m = MsgDeleteCronJobResponse{} }
func (m *MsgDeleteCronJobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCronJobResponse) ProtoMessage()    {}
func (*MsgDeleteCronJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{5}
}
func (m *MsgDeleteCronJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCronJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCronJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCronJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCronJobResponse.Merge(m, src)
}
func (m *MsgDeleteCronJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCronJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCronJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCronJobResponse proto.InternalMessageInfo

// MsgToggleCronJob defines the Msg/ToggleCronJob request type.
type MsgToggleCronJob struct {
	// security_address is the address authorised to toggle the cron job
	SecurityAddress string `protobuf:"bytes,1,opt,name=security_address,json=securityAddress,proto3" json:"security_address,omitempty"`
	// id is the unique identifier for the cron job
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgToggleCronJob) Reset()         { *m = MsgToggleCronJob{} }
func (m *MsgToggleCronJob) String() string { return proto.CompactTextString(m) }
func (*MsgToggleCronJob) ProtoMessage()    {}
func (*MsgToggleCronJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{6}
}
func (m *MsgToggleCronJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleCronJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleCronJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleCronJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleCronJob.Merge(m, src)
}
func (m *MsgToggleCronJob) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleCronJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleCronJob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleCronJob proto.InternalMessageInfo

func (m *MsgToggleCronJob) GetSecurityAddress() string {
	if m != nil {
		return m.SecurityAddress
	}
	return ""
}

func (m *MsgToggleCronJob) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgToggleCronJobResponse defines the Msg/ToggleCronJob response type.
type MsgToggleCronJobResponse struct {
}

func (m *MsgToggleCronJobResponse) Reset()         { *m = MsgToggleCronJobResponse{} }
func (m *MsgToggleCronJobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleCronJobResponse) ProtoMessage()    {}
func (*MsgToggleCronJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8818779b05b2177, []int{7}
}
func (m *MsgToggleCronJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleCronJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleCronJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleCronJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleCronJobResponse.Merge(m, src)
}
func (m *MsgToggleCronJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleCronJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleCronJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleCronJobResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterCron)(nil), "osmosis.cron.v1beta1.MsgRegisterCron")
	proto.RegisterType((*MsgRegisterCronResponse)(nil), "osmosis.cron.v1beta1.MsgRegisterCronResponse")
	proto.RegisterType((*MsgUpdateCronJob)(nil), "osmosis.cron.v1beta1.MsgUpdateCronJob")
	proto.RegisterType((*MsgUpdateCronJobResponse)(nil), "osmosis.cron.v1beta1.MsgUpdateCronJobResponse")
	proto.RegisterType((*MsgDeleteCronJob)(nil), "osmosis.cron.v1beta1.MsgDeleteCronJob")
	proto.RegisterType((*MsgDeleteCronJobResponse)(nil), "osmosis.cron.v1beta1.MsgDeleteCronJobResponse")
	proto.RegisterType((*MsgToggleCronJob)(nil), "osmosis.cron.v1beta1.MsgToggleCronJob")
	proto.RegisterType((*MsgToggleCronJobResponse)(nil), "osmosis.cron.v1beta1.MsgToggleCronJobResponse")
}

func init() { proto.RegisterFile("osmosis/cron/v1beta1/tx.proto", fileDescriptor_f8818779b05b2177) }

var fileDescriptor_f8818779b05b2177 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcb, 0x6a, 0xdb, 0x40,
	0x14, 0x86, 0x2d, 0x4b, 0xbd, 0x4d, 0x2f, 0x36, 0xa2, 0x50, 0xd9, 0x50, 0x61, 0x0c, 0x2d, 0xed,
	0xc2, 0x52, 0xed, 0xae, 0xba, 0xec, 0x65, 0x65, 0xd0, 0x46, 0x34, 0x9b, 0x6c, 0x8c, 0x2e, 0xc3,
	0x64, 0x82, 0xa5, 0x11, 0x73, 0xc6, 0xc6, 0x7e, 0x8b, 0x40, 0xde, 0x21, 0xcf, 0x90, 0x47, 0xc8,
	0xd2, 0xcb, 0x2c, 0x83, 0xfd, 0x22, 0x41, 0x63, 0xc9, 0x78, 0x8c, 0xec, 0x38, 0x10, 0xb2, 0xd3,
	0x9c, 0xf3, 0x6b, 0xbe, 0x6f, 0x38, 0xc3, 0xa0, 0xcf, 0x0c, 0x12, 0x06, 0x14, 0xdc, 0x88, 0xb3,
	0xd4, 0x9d, 0xf6, 0x43, 0x2c, 0x82, 0xbe, 0x2b, 0x66, 0x4e, 0xc6, 0x99, 0x60, 0xe6, 0xc7, 0xa2,
	0xed, 0xe4, 0x6d, 0xa7, 0x68, 0x77, 0xaf, 0x35, 0xd4, 0xf0, 0x80, 0xf8, 0x98, 0x50, 0x10, 0x98,
	0xff, 0xe5, 0x2c, 0x35, 0xbf, 0xa3, 0x26, 0xe0, 0x68, 0xc2, 0xa9, 0x98, 0x8f, 0x82, 0x38, 0xe6,
	0x18, 0xc0, 0xd2, 0x3a, 0xda, 0xb7, 0x37, 0x7e, 0xa3, 0xac, 0xff, 0x5e, 0x97, 0x4d, 0x13, 0x19,
	0x69, 0x90, 0x60, 0xab, 0x2e, 0xdb, 0xf2, 0xdb, 0xec, 0xa0, 0xb7, 0x31, 0x86, 0x88, 0xd3, 0x4c,
	0x50, 0x96, 0x5a, 0xba, 0x6c, 0x6d, 0x97, 0x72, 0x40, 0xc4, 0x52, 0xc1, 0x83, 0x48, 0x6c, 0x00,
	0xc6, 0x1a, 0x50, 0xd6, 0x4b, 0x40, 0x0b, 0xbd, 0x3e, 0x07, 0x96, 0x8e, 0x12, 0x20, 0xd6, 0x0b,
	0x19, 0x79, 0x95, 0xaf, 0x3d, 0x20, 0xdd, 0x16, 0xfa, 0xb4, 0x63, 0xee, 0x63, 0xc8, 0x58, 0x0a,
	0xb8, 0x7b, 0xa9, 0xa1, 0xa6, 0x07, 0xe4, 0x24, 0x8b, 0x03, 0x81, 0xf3, 0xce, 0x90, 0x85, 0x8f,
	0x39, 0xd6, 0x07, 0x54, 0xa7, 0xb1, 0x3c, 0x94, 0xe1, 0xd7, 0x69, 0x5c, 0x29, 0xac, 0x3f, 0x2c,
	0x6c, 0xa8, 0xc2, 0x6d, 0x64, 0xed, 0x4a, 0x6d, 0x8c, 0x67, 0x52, 0xf8, 0x1f, 0x1e, 0xe3, 0x67,
	0x16, 0x2e, 0xac, 0x14, 0xf2, 0xc6, 0xca, 0x93, 0x56, 0xff, 0x19, 0x21, 0xe3, 0x27, 0xb0, 0x2a,
	0x50, 0xca, 0x76, 0x25, 0x6a, 0x70, 0xa5, 0x23, 0xdd, 0x03, 0x62, 0xc6, 0xe8, 0x9d, 0x72, 0x19,
	0xbf, 0x38, 0x55, 0xf7, 0xd6, 0xd9, 0x99, 0x7c, 0xbb, 0x77, 0x54, 0xac, 0xa4, 0x99, 0x04, 0xbd,
	0x57, 0x2f, 0xc7, 0xd7, 0xbd, 0xff, 0x2b, 0xb9, 0xb6, 0x73, 0x5c, 0x6e, 0x1b, 0xa4, 0x0e, 0x75,
	0x3f, 0x48, 0xc9, 0x1d, 0x00, 0x55, 0x8e, 0x2a, 0x07, 0xa9, 0x73, 0xda, 0x0f, 0x52, 0x72, 0x07,
	0x40, 0x95, 0x83, 0xfa, 0x33, 0xbc, 0x59, 0xda, 0xda, 0x62, 0x69, 0x6b, 0x77, 0x4b, 0x5b, 0xbb,
	0x58, 0xd9, 0xb5, 0xc5, 0xca, 0xae, 0xdd, 0xae, 0xec, 0xda, 0xe9, 0x0f, 0x42, 0xc5, 0xd9, 0x24,
	0x74, 0x22, 0x96, 0xb8, 0xc5, 0x9e, 0xbd, 0x71, 0x10, 0x42, 0xb9, 0x70, 0xa7, 0x83, 0x5f, 0xee,
	0x6c, 0xfd, 0x3c, 0x89, 0x79, 0x86, 0x21, 0x7c, 0x29, 0x9f, 0xa6, 0x9f, 0xf7, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xe0, 0xf1, 0x5a, 0xda, 0xbb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterCron(ctx context.Context, in *MsgRegisterCron, opts ...grpc.CallOption) (*MsgRegisterCronResponse, error)
	UpdateCronJob(ctx context.Context, in *MsgUpdateCronJob, opts ...grpc.CallOption) (*MsgUpdateCronJobResponse, error)
	DeleteCronJob(ctx context.Context, in *MsgDeleteCronJob, opts ...grpc.CallOption) (*MsgDeleteCronJobResponse, error)
	ToggleCronJob(ctx context.Context, in *MsgToggleCronJob, opts ...grpc.CallOption) (*MsgToggleCronJobResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterCron(ctx context.Context, in *MsgRegisterCron, opts ...grpc.CallOption) (*MsgRegisterCronResponse, error) {
	out := new(MsgRegisterCronResponse)
	err := c.cc.Invoke(ctx, "/osmosis.cron.v1beta1.Msg/RegisterCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCronJob(ctx context.Context, in *MsgUpdateCronJob, opts ...grpc.CallOption) (*MsgUpdateCronJobResponse, error) {
	out := new(MsgUpdateCronJobResponse)
	err := c.cc.Invoke(ctx, "/osmosis.cron.v1beta1.Msg/UpdateCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteCronJob(ctx context.Context, in *MsgDeleteCronJob, opts ...grpc.CallOption) (*MsgDeleteCronJobResponse, error) {
	out := new(MsgDeleteCronJobResponse)
	err := c.cc.Invoke(ctx, "/osmosis.cron.v1beta1.Msg/DeleteCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleCronJob(ctx context.Context, in *MsgToggleCronJob, opts ...grpc.CallOption) (*MsgToggleCronJobResponse, error) {
	out := new(MsgToggleCronJobResponse)
	err := c.cc.Invoke(ctx, "/osmosis.cron.v1beta1.Msg/ToggleCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterCron(context.Context, *MsgRegisterCron) (*MsgRegisterCronResponse, error)
	UpdateCronJob(context.Context, *MsgUpdateCronJob) (*MsgUpdateCronJobResponse, error)
	DeleteCronJob(context.Context, *MsgDeleteCronJob) (*MsgDeleteCronJobResponse, error)
	ToggleCronJob(context.Context, *MsgToggleCronJob) (*MsgToggleCronJobResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterCron(ctx context.Context, req *MsgRegisterCron) (*MsgRegisterCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCron not implemented")
}
func (*UnimplementedMsgServer) UpdateCronJob(ctx context.Context, req *MsgUpdateCronJob) (*MsgUpdateCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronJob not implemented")
}
func (*UnimplementedMsgServer) DeleteCronJob(ctx context.Context, req *MsgDeleteCronJob) (*MsgDeleteCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (*UnimplementedMsgServer) ToggleCronJob(ctx context.Context, req *MsgToggleCronJob) (*MsgToggleCronJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleCronJob not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCron)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.cron.v1beta1.Msg/RegisterCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCron(ctx, req.(*MsgRegisterCron))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCronJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.cron.v1beta1.Msg/UpdateCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCronJob(ctx, req.(*MsgUpdateCronJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteCronJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.cron.v1beta1.Msg/DeleteCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteCronJob(ctx, req.(*MsgDeleteCronJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleCronJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.cron.v1beta1.Msg/ToggleCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleCronJob(ctx, req.(*MsgToggleCronJob))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.cron.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCron",
			Handler:    _Msg_RegisterCron_Handler,
		},
		{
			MethodName: "UpdateCronJob",
			Handler:    _Msg_UpdateCronJob_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _Msg_DeleteCronJob_Handler,
		},
		{
			MethodName: "ToggleCronJob",
			Handler:    _Msg_ToggleCronJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/cron/v1beta1/tx.proto",
}

func (m *MsgRegisterCron) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCron) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCron) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonMsg) > 0 {
		i -= len(m.JsonMsg)
		copy(dAtA[i:], m.JsonMsg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JsonMsg)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SecurityAddress) > 0 {
		i -= len(m.SecurityAddress)
		copy(dAtA[i:], m.SecurityAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCronResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCronResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCronResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCronJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCronJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCronJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonMsg) > 0 {
		i -= len(m.JsonMsg)
		copy(dAtA[i:], m.JsonMsg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JsonMsg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SecurityAddress) > 0 {
		i -= len(m.SecurityAddress)
		copy(dAtA[i:], m.SecurityAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCronJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCronJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCronJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCronJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCronJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCronJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SecurityAddress) > 0 {
		i -= len(m.SecurityAddress)
		copy(dAtA[i:], m.SecurityAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCronJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCronJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCronJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleCronJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleCronJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleCronJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SecurityAddress) > 0 {
		i -= len(m.SecurityAddress)
		copy(dAtA[i:], m.SecurityAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleCronJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleCronJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleCronJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterCron) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecurityAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JsonMsg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterCronResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCronJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecurityAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.JsonMsg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCronJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteCronJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecurityAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteCronJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleCronJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecurityAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgToggleCronJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterCron) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCron: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCron: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCronResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCronResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCronResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCronJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCronJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCronJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCronJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCronJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCronJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCronJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCronJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCronJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCronJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCronJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCronJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleCronJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleCronJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleCronJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleCronJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleCronJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleCronJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
